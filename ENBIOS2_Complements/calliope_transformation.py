
import bw2data.errors
import pandas as pd
from ENBIOS2_Complements.data_for_enbios.const import data_path
import bw2data as bd
from pathlib import Path
from tqdm import tqdm


"""
** General note:
Works with bw2data -4.0.dev18. Fails with the latest version due to some errors wth the function db.get()

"""

# Get paths
processors_path=data_path / 'base_file_simplified.xlsx'
calliope=data_path / 'csv2_modified.csv'
dict_path=data_path /'dict.json'



# Select bw project and db

bd.projects.set_current('Hydrogen_SEEDS_3')
database=bd.Database('CUTOFF_391')

print(list(bd.databases))



def data_merge(basefile : Path):
    """
    This function reads the excel "mother file" and generates a dictionary following the structure:

    {technology name :
        { bw_code :,
        conversion factor:,
        }


    """
    df = pd.read_excel(basefile)
    general_dict={}
    for index,row in tqdm(df.iterrows()):

        name=row['Processor']+'_'+row['@SimulationCarrier']
        code=row['BW_DB_FILENAME']
        factor=row['@SimulationToEcoinventFactor']

        general_dict[name]={
            'factor': factor,
            'code':code
        }

    return general_dict
pass




def modify_data(calliope_data : Path, gen_dict: dict):

    """
    This function reads the dictionary generated by data_merge and the flow_out_sum file.
    Applies some transformations:
        *Multiply the flow_ou_sum by the characterization factor
        *Change the unit according to the conversion

    :param calliope_data: path to the data.csv, flow_out_sum.csv... (output from calliope)
    :param gen_dict:
    :return: Two files.
        *calliope_function.csv : Intermediate file to check units and techs
        * flow_out_sum_modified.csv : Final csv ready for enbios

        Returns a list of techs to apply the following function "check elements"
    """

    df=pd.read_csv(calliope_data, delimiter=';')

    # Create a modified column name to match  the names

    name2=[]
    for index, row in df.iterrows():
        try:
            new_name = str(row['techs']) + '_' + str(row['carriers'])
            name2.append(new_name)
        except TypeError:
            print('Type error found en fila', index)
            print('Fila problematica', row)
            continue
    df['names2'] = name2

    save_in=data_path / 'calliope_function.csv'

    df['new_vals']=None
    df['Units_new']=None


    df['flow_out_sum']=[x.replace(',','.') for x in df['flow_out_sum']]


    for key in tqdm(gen_dict.keys()):
        code=gen_dict[key]['code']

        pass
        try:
            activity=database.get(code)
            unit = activity['unit']

        except bw2data.errors.UnknownObject:
            print(code, 'from activity', key, 'not found')
            unit="none"

        for index,row in df.iterrows():
            if str(key)==str(row['names2']):
                factor=(gen_dict[key]['factor'])
                value=float(row['flow_out_sum'])
                new_val=value*factor


                df.at[index,'units']=unit
                df.at[index,'new_vals']=new_val


                # Here is the conversion
                # The base assumption


            else:
                pass
    # General To check
    df.to_csv(save_in, index=False)

    # Prepare an enbios-like file
    cols=['spores','techs','carriers','units','new_vals']
    df=df[cols]
    df.rename(columns={'spores':'scenarios','new_vals':'flow_out_sum'},inplace=True)

    #new_file name
    flow_out_path=data_path / 'flow_out_sum_modifified.csv'

    df.to_csv(flow_out_path,index=False)

    return name2  # for checking tech names
pass



def check_elements(dictionary, lst):
    present_names = []
    absent_names = []

    for name in lst:
        if name in dictionary:
            present_names.append(name)
        else:
            absent_names.append(name)
    present_names=set(present_names)
    absent_names=set(absent_names)

    return present_names, absent_names





if __name__=='__main__':

    a=data_merge(processors_path)           # Generate the dictionary
    names=modify_data(calliope, a)          # Generate the new csv
    present,absent=check_elements(a,names)  # check missing techs

#present,absent=check_elements(a,list1)




pass